# Monitor heap usage 

# Enable in your weaviate helm file
PROMETHEUS_MONITORING_ENABLED=true

# Create cluster
kind create cluster --config cluster.yaml

# Add a resource memory limit
resources: {}
  requests:
    memory: '4Gi'
  limits:
    memory: '2Gi'

# Deploy Weaviate
helm upgrade --install \
  "weaviate" \
  weaviate/weaviate \
  --values ./values.yaml

# Install prometheus stack
helm install prometheus prometheus-community/kube-prometheus-stack

# Modify the weaviate service node ports
sleep 10
kubectl patch svc weaviate --type='json' -p='[{"op":"replace","path":"/spec/ports/0/nodePort","value":30080}]'
kubectl patch svc weaviate-grpc --type='json' -p='[{"op":"replace","path":"/spec/ports/0/nodePort","value":30051}]'

# Modify the prometheus service ports
kubectl patch svc prometheus-grafana -p '{"spec": {"type": "NodePort", "ports": [{"port": 80, "protocol": "TCP", "nodePort": 30000}]}}'
kubectl patch svc prometheus-kube-prometheus-prometheus -p '{"spec": {"type": "NodePort", "ports": [{"port": 9090, "protocol": "TCP", "nodePort": 30909}]}}'

# Grab the grafana username and password
kubectl get secrets prometheus-grafana -o jsonpath='{.data.admin-password}' | base64 --decode ; echo
kubectl get secrets prometheus-grafana -o jsonpath='{.data.admin-user}' | base64 --decode ; echo

##############################################
# Expose cloud9 security group to the internet
##############################################

# View EC2 public IP
curl checkip.amazonaws.com

# See if client is ready
run "is client ready.py"

# Access grafana dashboard
username = admin
password = prom-operator

# Access prometheus
curl localhost:9090

# Apply a pod monitor
kubectl apply -f pod-monitor.yaml

# Install numpy
run "heap.py"

# View metrics
In Grafana, create a dashboard with heap memory-related metrics, like:
go_memstats_heap_alloc_bytes: Shows the current heap memory allocated.
go_memstats_heap_sys_bytes: Shows the total heap space obtained from the system.

# Delete cluster
kind delete cluster


